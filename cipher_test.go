// Copyright (c) 2016 Bob Ziuchkovski
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

package turing

import (
	"reflect"
	"testing"
)

func TestNewCipher(t *testing.T) {
	tests := []struct {
		name   string
		key    []byte
		iv     []byte
		loaded []uint32
		reg    [17]uint32
		valid  bool
	}{
		{
			name:   "Valid key and IV",
			key:    []byte{1, 2, 3, 4, 5, 6, 7, 8},
			iv:     []byte{1, 2, 3, 4, 5, 6, 7, 8},
			loaded: []uint32{0xf930de8f, 0xf88ecbc6},
			reg: [17]uint32{
				0xd994e2c1, 0x27ba34fa, 0xbf786a7a, 0x80eacf9d,
				0x459aad71, 0xdb51f8d6, 0xdc883e15, 0x07e5ebb3,
				0x3abb60e8, 0x4ada30eb, 0x79a3801a, 0x39e8b89f,
				0x40bf8c02, 0xe2585ec1, 0x449188a9, 0xc08c0c8d,
				0xa7fd59ed,
			},
			valid: true,
		},
		{
			name:   "Valid key without IV",
			key:    []byte{1, 2, 3, 4, 5, 6, 7, 8},
			loaded: []uint32{0xf930de8f, 0xf88ecbc6},
			reg: [17]uint32{
				0x2809eecf, 0xbf9afd42, 0xdc0b886c, 0xd49a26e8,
				0xb1a6a85a, 0xe0a2aee1, 0x47f12b07, 0x91080bb0,
				0x309fbce5, 0x4e43fe76, 0xeaf8c963, 0x99a24045,
				0x337caa9b, 0x78c6b836, 0xb3d1ad8a, 0xa8018ffa,
				0x6a7c2963,
			},
			valid: true,
		},
		{
			name:  "Key is too short",
			key:   []byte{1, 2, 3, 4},
			iv:    []byte{1, 2, 3, 4, 5, 6, 7, 8},
			valid: false,
		},
		{
			name: "Key is too long",
			key: []byte{
				1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12, 14, 15, 16,
				17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
				31, 32, 33, 34, 35, 36,
			},
			iv:    []byte{1, 2, 3, 4, 5, 6, 7, 8},
			valid: false,
		},
		{
			name: "IV is too long",
			key:  []byte{1, 2, 3, 4, 5, 6, 7, 8},
			iv: []byte{
				1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12, 14, 15, 16,
				17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
				31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
				45, 46, 47, 48, 49, 50, 51, 52,
			},
			valid: false,
		},
		{
			name:  "Key is not word-aligned",
			key:   []byte{1, 2, 3, 4, 5, 6, 7, 8, 9},
			iv:    []byte{1, 2, 3, 4, 5, 6, 7, 8},
			valid: false,
		},
		{
			name:  "IV is not word-aligned",
			key:   []byte{1, 2, 3, 4, 5, 6, 7, 8},
			iv:    []byte{1, 2, 3, 4, 5, 6, 7, 8, 9},
			valid: false,
		},
	}

	for _, test := range tests {
		cipher, err := NewCipher(test.key, test.iv)
		if !test.valid {
			if err == nil {
				t.Errorf("Expected error but didn't receive one.  Test: %s", test.name)
			}
			continue
		}
		if !reflect.DeepEqual(test.loaded, cipher.key) {
			t.Errorf("Loaded key is incorrect.  Test: %s, Loaded: %#v, Expected: %#v", test.name, cipher.key, test.loaded)
			continue
		}
		if test.reg != cipher.reg {
			t.Errorf("Initial registers are incorrect.  Test: %s, Registers: %#v, Expected: %#v", test.name, cipher.reg, test.reg)
			continue
		}
	}
}

func TestStream(t *testing.T) {
	key := []byte{1, 2, 3, 4, 5, 6, 7, 8}
	iv := []byte{1, 2, 3, 4, 5, 6, 7, 8}
	plaintext := []byte(`When in the Course of human events, it becomes necessary for one people to
		dissolve the political bands which have connected them with another, and to assume among the
		powers of the earth, the separate and equal station to which the Laws of Nature and of Nature's
		God entitle them, a decent respect to the opinions of mankind requires that they should declare
		the causes which impel them to the separation.`)
	ciphertext := []byte{
		0x19, 0x90, 0xf7, 0x04, 0x43, 0xbf, 0xd5, 0x36, 0x31, 0x2f, 0x0d, 0x29, 0xb8, 0x40, 0xe7, 0x0b,
		0x49, 0x0a, 0xbe, 0xb6, 0xc5, 0x78, 0x6b, 0x66, 0xa6, 0xa4, 0xcb, 0x2a, 0x10, 0xdf, 0xde, 0x3b,
		0x57, 0x7a, 0x51, 0x06, 0xf1, 0x58, 0x5b, 0xe5, 0xe7, 0xb5, 0x03, 0x44, 0x40, 0xa5, 0x33, 0xba,
		0xe6, 0x99, 0xcf, 0xb6, 0xb6, 0x64, 0x5a, 0x6f, 0xd0, 0xd3, 0xac, 0x3f, 0xe2, 0x45, 0x25, 0xb1,
		0x50, 0xb4, 0x03, 0x72, 0x8d, 0x3d, 0xb6, 0xc1, 0x5d, 0x18, 0x8e, 0xd0, 0x86, 0x8c, 0x84, 0xe3,
		0x12, 0xd8, 0x54, 0x7e, 0x73, 0xc4, 0xfb, 0xbd, 0x2d, 0x8e, 0x52, 0x99, 0x0f, 0x50, 0x53, 0x2f,
		0x89, 0x0f, 0x67, 0xc0, 0xec, 0xb4, 0x21, 0x0d, 0xf1, 0x2b, 0x03, 0x79, 0xf9, 0x73, 0xee, 0x16,
		0x72, 0x43, 0xa6, 0x1c, 0x20, 0x8e, 0x81, 0x07, 0xf0, 0x9b, 0x93, 0x03, 0x77, 0xf5, 0x82, 0x3d,
		0x29, 0x5e, 0xea, 0xe6, 0xd4, 0x6c, 0xca, 0x35, 0x75, 0x05, 0xeb, 0x9b, 0xc3, 0xcc, 0xf4, 0x6e,
		0xaa, 0x46, 0xab, 0xe4, 0xc8, 0x90, 0x04, 0xe5, 0x65, 0xb2, 0x09, 0x4d, 0x16, 0x58, 0x0c, 0x1c,
		0xc7, 0xea, 0x4f, 0x23, 0x03, 0x37, 0x51, 0x21, 0xd7, 0x06, 0x79, 0x7b, 0xb1, 0x73, 0x72, 0x0f,
		0x86, 0x7b, 0xe1, 0xfb, 0x50, 0x9b, 0xe3, 0x28, 0xb2, 0xee, 0xb7, 0x28, 0xf9, 0xc3, 0x84, 0x6a,
		0x66, 0x62, 0x86, 0x60, 0xef, 0x64, 0xc0, 0x9d, 0x59, 0x48, 0x90, 0x4d, 0x22, 0x23, 0xb4, 0x0e,
		0x41, 0x75, 0x6f, 0x3c, 0x4e, 0x5f, 0x96, 0xed, 0xeb, 0xf6, 0x71, 0x44, 0x09, 0x16, 0xc0, 0xaf,
		0x3b, 0xe8, 0xee, 0x77, 0xf5, 0x09, 0xda, 0x95, 0x81, 0x15, 0x25, 0xec, 0xf1, 0x51, 0xd3, 0x81,
		0x26, 0x28, 0x8e, 0xa7, 0x07, 0xf5, 0x7d, 0x2a, 0x6f, 0xb0, 0x91, 0xfe, 0x98, 0x5c, 0x26, 0xc0,
		0xb4, 0xd9, 0x07, 0xdf, 0x30, 0x2b, 0x28, 0x97, 0x73, 0xd3, 0x18, 0x9e, 0xe8, 0x94, 0x37, 0x40,
		0x0c, 0xeb, 0x29, 0xec, 0xd6, 0x1e, 0xdd, 0xd6, 0x77, 0xbc, 0x0b, 0xfd, 0x54, 0xca, 0x43, 0x81,
		0xf2, 0x76, 0xcd, 0x1a, 0x8e, 0x1d, 0x4d, 0x4f, 0x4a, 0xb0, 0x1b, 0xd8, 0xb9, 0xe9, 0x6d, 0x12,
		0x3e, 0xe2, 0x7e, 0xe8, 0x45, 0xaf, 0x92, 0x9b, 0xe9, 0x57, 0xc9, 0xdf, 0xa1, 0x05, 0xb3, 0xc4,
		0x9c, 0xce, 0xd0, 0x23, 0x85, 0x49, 0x09, 0x05, 0x3d, 0x3e, 0x35, 0x2e, 0x50, 0x4c, 0x2e, 0x99,
		0xa4, 0xc7, 0x7f, 0xb5, 0xb1, 0xec, 0xc8, 0x11, 0xd2, 0xfd, 0x21, 0xeb, 0x5a, 0x21, 0x21, 0xf9,
		0xf1, 0x75, 0x7e, 0x6f, 0x11, 0x05, 0xd9, 0xa4, 0x16, 0xff, 0xf5, 0x45, 0x6a, 0x1d, 0x10, 0xc1,
		0x74, 0x15, 0x3e, 0x83, 0x2b, 0xff, 0x08, 0x10, 0x44, 0x2c, 0x76, 0x21, 0x6a, 0x95, 0xfc, 0x9d,
		0xe4, 0xec, 0x9e, 0xaf, 0x27, 0xc1, 0xce, 0x45, 0xcf, 0xfa, 0xd2, 0xeb, 0x58, 0xd7, 0xd4, 0xe4,
		0x54, 0xbe, 0x03, 0xfb, 0x35, 0xf2, 0xd5, 0x3b, 0xe2, 0xb4, 0xbf, 0x8b, 0xd3, 0x6b,
	}
	cipher, err := NewCipher(key, iv)
	if err != nil {
		t.Errorf("Encountered unexpected error creating cipher: %s", err)
	}

	buf := make([]byte, len(plaintext))
	cipher.XORKeyStream(buf, plaintext)
	if !reflect.DeepEqual(buf, ciphertext) {
		t.Errorf("Cipher stream is invalid")
	}
}

func TestReset(t *testing.T) {
	key := []byte{1, 2, 3, 4, 5, 6, 7, 8}
	iv := []byte{1, 2, 3, 4, 5, 6, 7, 8}
	cipher, err := NewCipher(key, iv)
	if err != nil {
		t.Errorf("Encountered unexpected error creating cipher: %s", err)
	}
	cipher.Reset()
	for i := range cipher.key {
		if cipher.key[i] != 0 {
			t.Errorf("cipher.key[i] not cleared, i: %d", i)
		}
	}
	for i := range cipher.keybox {
		for j := range cipher.keybox[i] {
			if cipher.keybox[i][j] != 0 {
				t.Errorf("cipher.keybox[i][j] not cleared, i: %d, j: %d", i, j)
			}
		}
	}
	for i := range cipher.buffer {
		if cipher.buffer[i] != 0 {
			t.Errorf("cipher.buffer[i] not cleared, i: %d", i)
		}
	}
	for i := range cipher.reg {
		if cipher.reg[i] != 0 {
			t.Errorf("cipher.reg[i] not cleared, i: %d", i)
		}
	}
	if cipher.bufpos != 0 {
		t.Errorf("cipher.bufpos not cleared")
	}
}

func TestError(t *testing.T) {
	// Ensure KeySizeError.Error() is sane
	_, err := NewCipher(nil, nil)
	if err.Error() == "" {
		t.Errorf("Expected an error message but got a blank string instead")
	}
}
